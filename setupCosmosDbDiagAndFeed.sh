#!/bin/bash

# store year month date time as a variable
# append it to resources to semi-ensure unique names where needed
DATE_TIME=`date +'%Y%m%d%H%M'`

# Change these values to accomodate your environment
# No checks of name space compliance, collisions, or the like takes place
# This script will fail if any of the above occur
AZ_RESOURCE_GROUP=mycosmosrg
AZ_REGION=westus2

AZ_STORAGE_ACCOUNT=mycosmossa$DATE_TIME
AZ_STORAGE_ACCOUNT_BLOB_CONTAINER=mycosmossacontainer
AZ_STORAGE_ACCOUNT_SAS_EXPIRY=2030-01-01

AZ_EVENTHUB_NAMESPACE=mycosmosehns$DATE_TIME
AZ_EVENTHUB_NAME=mycosmoseh$DATE_TIME
AZ_EVENTHUB_SAS_NAME=mycosmossas$DATE_TIME

AZ_COSMOSDB_ACCOUNT_NAME=mycosmosdbacct$DATE_TIME
AZ_COSMOSDB_DB_TYPE=GlobalDocumentDB
AZ_COSMOSDB_DB_NAME=mycosmosdbname$DATE_TIME
AZ_COSMOSDB_COLLECTION_NAME=mycosmosdbcollectionname$DATE_TIME
AZ_COSMOSDB_LEASE_COLLECTION_NAME=mycosmosdbleasecollectionname$DATE_TIME

# Values assigned to variables below are generated by this script during execution
# Values you manually assign will not be used

# Internal: Save the Storage Account SAS And Event Hub Connection string to a variable
AZ_STORAGE_ACCOUNT_SAS=
AZ_EVENTHUB_CONNECTION_STRING=

# Internal: Use this variable to store where log files get placed during runtime
AZ_MONITOR_LOG_FILE_PATH=

# Start

echo ""
echo "Welcome to the Azure Cosmos DB Diagnostics and Change Feed starter kit!"
echo ""

read -p "Use cached credentials from a previous az login? " LOGIN_AGAIN
echo
LOGIN_AGAIN=`echo $LOGIN_AGAIN | cut -c1-1`
if [[ $LOGIN_AGAIN =~ ^[Nn]$ ]]
then
    az login
fi

# Get the ID of the Azure Subscription 
AZ_SUBSCRIPTION_ID=`az account show --query id | sed 's/^"\(.*\)"$/\1/'`

# Confirm deletion of any existing resource group or monitor configuration of the same name
read -p "Delete any existing Azure Resouce Group ($AZ_RESOURCE_GROUP), Monitor Configuration, and cosmosDbDiagAndFeedSettings.json? " DELETE_RESOURCES
echo
DELETE_RESOURCES=`echo $DELETE_RESOURCES | cut -c1-1`
if [[ $DELETE_RESOURCES =~ ^[Yy]$ ]]
then
    az monitor log-profiles delete --name "default"
    az group delete -y -n $AZ_RESOURCE_GROUP
    rm cosmosDbDiagAndFeedSettings.json
fi

# Setup the Resource Group in the specified region
az group create -n $AZ_RESOURCE_GROUP -l $AZ_REGION

# Setup the Blob Storage account and generate a SAS
az storage account create --name $AZ_STORAGE_ACCOUNT --resource-group $AZ_RESOURCE_GROUP \
    --kind BlobStorage --location $AZ_REGION --access-tier hot
az storage container create --account-name $AZ_STORAGE_ACCOUNT --name $AZ_STORAGE_ACCOUNT_BLOB_CONTAINER
AZ_STORAGE_ACCOUNT_SAS=`az storage account generate-sas --account-name $AZ_STORAGE_ACCOUNT \
    --services b --resource-types sco --permissions acdlrw --https-only --expiry $AZ_STORAGE_ACCOUNT_SAS_EXPIRY | sed 's/^"\(.*\)"$/\1/' `
AZ_STORAGE_ACCOUNT_CONNECTION_STRING="BlobEndpoint=https://$AZ_STORAGE_ACCOUNT.blob.core.windows.net/;SharedAccessSignature=$AZ_STORAGE_ACCOUNT_SAS"

# Setup the Event Hub Name Space
az eventhubs namespace create --resource-group $AZ_RESOURCE_GROUP --name $AZ_EVENTHUB_NAMESPACE \
    --sku Standard --capacity 1 --location $AZ_REGION

# Setup an Event Hub within the Event Hub Name Space
az eventhubs eventhub create --resource-group $AZ_RESOURCE_GROUP --namespace-name $AZ_EVENTHUB_NAMESPACE --name $AZ_EVENTHUB_NAME \
    --message-retention 7 --partition-count 4

# Setup Cosmos DB account, database, collection, and lease collection

# Create a $COSMOSDB_DB_TYPE API Cosmos DB account
az cosmosdb create --name $AZ_COSMOSDB_ACCOUNT_NAME --kind $AZ_COSMOSDB_DB_TYPE --resource-group $AZ_RESOURCE_GROUP 

# Create a database 
az cosmosdb database create --name $AZ_COSMOSDB_ACCOUNT_NAME --db-name $AZ_COSMOSDB_DB_NAME --resource-group $AZ_RESOURCE_GROUP

# Create a collection
az cosmosdb collection create --name $AZ_COSMOSDB_ACCOUNT_NAME --db-name $AZ_COSMOSDB_DB_NAME --collection-name $AZ_COSMOSDB_COLLECTION_NAME \
    --resource-group $AZ_RESOURCE_GROUP

# Create a lease collection
az cosmosdb collection create --name $AZ_COSMOSDB_ACCOUNT_NAME --db-name $AZ_COSMOSDB_DB_NAME --collection-name $AZ_COSMOSDB_LEASE_COLLECTION_NAME \
    --resource-group $AZ_RESOURCE_GROUP

# Get the URI to the DB
AZ_COSMOSDB_URI=`az cosmosdb show --resource-group $AZ_RESOURCE_GROUP --name $AZ_COSMOSDB_ACCOUNT_NAME --query documentEndpoint -o tsv`

# Get the Primary Security Key for the DB
AZ_COSMOSDB_PRIMARY_KEY=`az cosmosdb list-keys --resource-group $AZ_RESOURCE_GROUP --name $AZ_COSMOSDB_ACCOUNT_NAME --query primaryMasterKey -o tsv`

# Now, create a Shared Access Signature that provides limited access to the Event Hub
# i.e. don't use the Event Hub Namespace master keys
az eventhubs eventhub authorization-rule create --namespace-name $AZ_EVENTHUB_NAMESPACE \
    --resource-group $AZ_RESOURCE_GROUP --eventhub-name $AZ_EVENTHUB_NAME --rights Listen --name $AZ_EVENTHUB_SAS_NAME
AZ_EVENTHUB_CONNECTION_STRING=`az eventhubs eventhub authorization-rule keys list --namespace-name $AZ_EVENTHUB_NAMESPACE --resource-group $AZ_RESOURCE_GROUP --eventhub-name $AZ_EVENTHUB_NAME --name $AZ_EVENTHUB_SAS_NAME --query primaryConnectionString | sed 's/^"\(.*\)"$/\1/' `

# Echo Azure settings for the user to see
echo "Storage Account Name is" $AZ_STORAGE_ACCOUNT
echo "Storage Account Container Name is" $AZ_STORAGE_ACCOUNT_BLOB_CONTAINER
echo "Storage Shared Access Signature is" $AZ_STORAGE_ACCOUNT_SAS
echo "Event Hub Name is" $AZ_EVENTHUB_NAME
echo "Event Hub Connection String is" $AZ_EVENTHUB_CONNECTION_STRING
echo "Cosmos DB Uri is" $AZ_COSMOSDB_URI

echo "Where do you want the Azure Cosmos DB log files to be stored?"
echo "If you don't know, just press enter.  We'll create a temporary directory each time you run the app."
read -p "Path: " PATH_ENTERED
if [[ ! -z $PATH_ENTERED ]]
then
    AZ_MONITOR_LOG_FILE_PATH=$PATH_ENTERED
    echo "Azure Monitor Log file path set to" $AZ_MONITOR_LOG_FILE_PATH
else
    echo "No path entered. We'll create a temporary directory each time you run the app."
fi

# Put Azure settings into a JSON file so our .NET app can use them
printf '{\n "az_storage_account":"%s",\n "az_storage_blob_container":"%s",\n "az_storage_account_connection_string":"%s",\n "az_event_hub_name" : "%s",\n "az_event_hub_connection_string":"%s",\n "az_local_logs_dir" : "%s",\n "az_cosmos_uri" : "%s",\n "az_cosmos_key" : "%s",\n "az_cosmos_db_name" : "%s",\n "az_cosmos_collection_name" : "%s",\n "az_cosmos_lease_collection_name" : "%s"  \n }\n' \
     "$AZ_STORAGE_ACCOUNT" "$AZ_STORAGE_ACCOUNT_BLOB_CONTAINER" \
     "$AZ_STORAGE_ACCOUNT_CONNECTION_STRING" \
     "$AZ_EVENTHUB_NAME" "$AZ_EVENTHUB_CONNECTION_STRING" "$AZ_MONITOR_LOG_FILE_PATH" \
     "$AZ_COSMOSDB_URI" "$AZ_COSMOSDB_PRIMARY_KEY" "$AZ_COSMOSDB_DB_NAME" "$AZ_COSMOSDB_COLLECTION_NAME" "$AZ_COSMOSDB_LEASE_COLLECTION_NAME" > cosmosDbDiagAndFeedSettings.json

echo "Important - you must now enable diagnostics for your Cosmos DB instance in the Azure Portal."
echo "Go to https://portal.azure.com, navigate to the $AZ_RESOURCE_GROUP resource group and $AZ_COSMOSDB_ACCOUNT_NAME Cosmos DB account."
echo "Scroll down to MONITORING, select Diagnostic settings, and Turn on diagnostics"
echo "Give your Diagnostic settings a name, Stream to an event hub, Event hub -> Configure"
echo "Event Hub namespace should be $AZ_EVENTHUB_NAMESPACE, Event Hub name of $AZ_EVENTHUB_NAME, and policy name of RootManageSharedAccessKey.  Click OK at the bottom"
echo "Back on Diagnostic settings under LOG select DataPlaneRequests, MongoRequests, QueryRuntimeStatistics"
echo "On METRIC select Requests"
echo "Finally, select Save at the top"
echo "It may take one or two hours before Diagnostic logs begin arriving"
echo
echo "Setup complete. You'll now need to build and run the application: dotnet clean;dotnet build;dotnet run"